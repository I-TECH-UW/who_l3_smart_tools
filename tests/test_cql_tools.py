# Generated by CodiumAI
import os
from who_l3_smart_tools.core.indicator_generation.cql_tools import (
    CQLResourceGenerator,
    CqlScaffoldGenerator,
)
import pandas as pd
import unittest
import stringcase

class TestCqlScaffold(unittest.TestCase):
    def test_generate_cql_file_headers(self):
        input_file = "tests/data/full_indicator_list.xlsx"
        output_dir = "tests/output/cql/templates/"

        # Make sure output directory exists
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        generator = CqlScaffoldGenerator(input_file)

        generator.generate_cql_scaffolds()

        generator.print_to_files(output_dir)

        self.assertTrue(os.path.exists(output_dir + "HIV.IND.2.cql"))

    def test_generate_cql_template(self):
        input_file = "tests/data/indicator_dak_input_MINI.xlsx"

        generator = CqlScaffoldGenerator(input_file)

        indicator_artifact = pd.read_excel(
            input_file, sheet_name="Indicator definitions"
        )

        # Test the first row
        cql_template = generator.generate_cql_template(indicator_artifact.iloc[0])

        self.assertIsNotNone(cql_template)


class TestCqlResourceGenerator(unittest.TestCase):
    def setUp(self):
        # Load example CQL from data directory
        cql_file_path = "tests/data/example_cql_HIV27.cql"
        indicator_file_path = "tests/data/indicator_dak_input_MINI.xlsx"

        # Load content and close file
        cql_file = open(cql_file_path, "r")
        self.cql_content = cql_file.read()
        cql_file.close()

        indicator_file = pd.read_excel(
            indicator_file_path, sheet_name="Indicator definitions"
        )

        self.indicator_row = indicator_file.iloc[2]

        self.generator = CQLResourceGenerator(self.indicator_row, self.cql_content)

    def test_parse_cql_with_valid_content(self):
        parsed_cql = self.generator.parse_cql()

        self.assertIsNotNone(parsed_cql)
        self.assertEqual(parsed_cql["library_name"], "HIV.IND.27")
        self.assertIn("stratifiers", parsed_cql.keys())
        self.assertIn("denominator", parsed_cql.keys())
        self.assertIn("numerator", parsed_cql.keys())
        self.assertIn("populations", parsed_cql.keys())
        self.assertGreater(len(parsed_cql["stratifiers"]), 0)
        self.assertGreater(len(parsed_cql["populations"]), 0)
        self.assertIsNotNone(parsed_cql["denominator"])
        self.assertIsNotNone(parsed_cql["numerator"])

    def test_generate_library_fsh(self):
        p = self.generator.parse_cql()
        library_fsh = self.generator.generate_library_fsh()

        output_file = "tests/output/fsh/HIV27_library.fsh"

        if os.path.exists(output_file):
            os.remove(output_file)
        with open(output_file, "w") as f:
            f.write(library_fsh)

        expected_lib_file = f"tests/data/example_fsh/{stringcase.alphanumcase(p["library_name"])}_library.fsh"
        expected_lib_file = open(expected_lib_file, "r")

        expected_library_fsh = expected_lib_file.read()

        self.assertIsNotNone(library_fsh)

        self.assertEqual(library_fsh.strip(), expected_library_fsh.strip())

    def test_generate_measure_fsh(self):
        p = self.generator.parse_cql()
        measure_fsh = self.generator.generate_measure_fsh()

        output_file = f"tests/output/fsh/{stringcase.alphanumcase(p["library_name"])}_measure.fsh"

        if os.path.exists(output_file):
            os.remove(output_file)
        with open(output_file, "w") as f:
            f.write(measure_fsh)

        expected_measure_file = "tests/data/example_fsh/HIV27_measure.fsh"
        expected_measure_file = open(expected_measure_file, "r")

        expected_measure_fsh = expected_measure_file.read()

        self.assertIsNotNone(measure_fsh)
        self.assertEqual(measure_fsh.strip(), expected_measure_fsh.strip())


if __name__ == "__main__":
    unittest.main()

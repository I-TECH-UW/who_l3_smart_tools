# Generated by CodiumAI
import os
from who_l3_smart_tools.core.indicator_generation.cql_tools import (
    CQLResourceGenerator,
    CqlScaffoldGenerator,
)
import pandas as pd
import unittest


class TestCqlScaffold(unittest.TestCase):
    def test_generate_cql_file_headers(self):
        input_file = "tests/data/full_indicator_list.xlsx"
        output_dir = "tests/output/cql/templates/"

        # Make sure output directory exists
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        generator = CqlScaffoldGenerator(input_file)

        generator.generate_cql_scaffolds()

        generator.print_to_files(output_dir)

        self.assertTrue(os.path.exists(output_dir + "HIV.IND.2.cql"))

    def test_generate_cql_template(self):
        input_file = "tests/data/indicator_dak_input_MINI.xlsx"

        generator = CqlScaffoldGenerator(input_file)

        indicator_artifact = pd.read_excel(
            input_file, sheet_name="Indicator definitions"
        )

        # Test the first row
        cql_template = generator.generate_cql_template(indicator_artifact.iloc[0])

        self.assertIsNotNone(cql_template)


class TestParseCql(unittest.TestCase):
    def test_parse_cql_with_valid_content(self):
        # Load example CQL from data directory
        cql_file_path = "tests/data/example_cql_HIV20.cql"
        indicator_file_path = "tests/data/indicator_dak_input_MINI.xlsx"

        # Load content and close file
        cql_file = open(cql_file_path, "r")
        cql_content = cql_file.read()
        cql_file.close()

        indicator_file = pd.read_excel(
            indicator_file_path, sheet_name="Indicator definitions"
        )

        indicator_row = indicator_file.iloc[1]

        generator = CQLResourceGenerator(indicator_row, cql_content)

        parsed_cql = generator.parse_cql()

        self.assertIsNotNone(parsed_cql)
        self.assertEqual(parsed_cql["library_name"], "HIV.IND.20")
        self.assertIn("stratifiers", parsed_cql.keys())
        self.assertIn("denominator", parsed_cql.keys())
        self.assertIn("numerator", parsed_cql.keys())
        self.assertIn("populations", parsed_cql.keys())
        self.assertGreater(len(parsed_cql["stratifiers"]), 0)
        self.assertGreater(len(parsed_cql["populations"]), 0)
        self.assertIsNotNone(parsed_cql["denominator"])
        self.assertIsNotNone(parsed_cql["numerator"])


if __name__ == "__main__":
    unittest.main()

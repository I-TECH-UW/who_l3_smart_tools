# Generated by CodiumAI
import os
from who_l3_smart_tools.core.indicator_generation.cql_tools import (
    CqlScaffoldGenerator,
)
import pandas as pd
import unittest


class TestCqlScaffold(unittest.TestCase):

    # Generates a new Excel file with the same number of sheets as the number of rows in the 'Indicator definitions' sheet of the input file.
    def test_generate_cql_file_headers(self):
        input_file = "tests/data/full_indicator_list.xlsx"
        output_dir = "tests/output/cql/templates/"

        # Make sure output directory exists
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        generator = CqlScaffoldGenerator(input_file)

        generator.generate_cql_scaffolds()

        generator.print_to_files(output_dir)

    def test_generate_cql_template(self):
        input_file = "tests/data/indicator_dak_input_MINI.xlsx"

        generator = CqlScaffoldGenerator(input_file)

        indicator_artifact = pd.read_excel(
            input_file, sheet_name="Indicator definitions"
        )

        # Test the first row
        cql_template = generator.generate_cql_template(indicator_artifact.iloc[0])

        print(cql_template)

class TestParseCql(unittest.TestCase):
    def test_parse_cql_with_valid_content(self):
        # Load example CQL from data directory
        filename = "tests/data/example_cql.cql"

        # Load content and close file
        cql_file = open(filename, "r")
        cql_content = cql_file.read()
        cql_file.close()

        generator = CQLResourceGenerator(cql_content)

        parsedCQL = generator.parse_cql()

        self.assertEqual(parsedCQL["library_name"], "Measles_1")


if __name__ == "__main__":
    unittest.main()
